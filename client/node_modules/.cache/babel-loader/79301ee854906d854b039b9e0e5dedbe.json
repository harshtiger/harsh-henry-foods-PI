{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ttige\\\\Desktop\\\\harsh\\\\client\\\\src\\\\components\\\\Paginate\\\\Paginate.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./Paginate.css\"; //action \n\nimport { setPagIndexes } from \"../../actions/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Paginate(_ref) {\n  _s();\n\n  let {\n    paginate,\n    handleNext,\n    handleSupNext,\n    handleSupPrev,\n    handlePrev\n  } = _ref;\n  const dispatch = useDispatch();\n  const allRecipes = useSelector(state => state.recipes.length); // \n\n  const [currentPage, setCurrentPage] = useState(1);\n  const recipesPerPage = 9;\n  const indexOfLastRecipe = currentPage * recipesPerPage;\n  const indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;\n  const pagesDisplayLimit = 5;\n  const [maxPageDisplay, setMaxPageDisplay] = useState(5);\n  const [minPageDisplay, setMinPageDisplay] = useState(1); // actualizo el state del store con index last e index first\n\n  useEffect(() => dispatch(setPagIndexes(indexOfLastRecipe, indexOfFirstRecipe)), [indexOfLastRecipe, indexOfFirstRecipe, dispatch]); //* Reset to first page when recipes changes\n\n  useEffect(() => {\n    setCurrentPage(1);\n    setMaxPageDisplay(5);\n    setMinPageDisplay(1);\n  }, [allRecipes]); //* Calculate number of posssible pages\n\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\n    pageNumbers.push(i);\n  } //* functions to pass to prev/next page\n\n\n  return (\n    /*#__PURE__*/\n\n    /*<nav className=\"btnPag\">\r\n       {pageNumbers &&\r\n         pageNumbers.map((number) => (\r\n         <button key={number} onClick={() => paginate(number)}>\r\n             {number}\r\n           </button>\r\n         ))}\r\n     </nav>\r\n    );*/\n    _jsxDEV(\"nav\", {\n      className: \"btnPag\",\n      children: pageNumbers.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSupPrev(currentPage),\n          children: \"<<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePrev(currentPage),\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), pageNumbers === null || pageNumbers === void 0 ? void 0 : pageNumbers.map(number => {\n          if (number <= maxPageDisplay && number >= minPageDisplay) {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              id: number,\n              className: currentPage === number ? \"active\" : null,\n              onClick: () => paginate(number),\n              children: number\n            }, number, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this);\n          } else {\n            return null;\n          }\n        }), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleNext(currentPage),\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSupNext(currentPage),\n          children: \">>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 3\n    }, this)\n  );\n}\n\n_s(Paginate, \"YTen9/st/R5q4BuZwuXtzZiKqAQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Paginate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginate\");","map":{"version":3,"sources":["C:/Users/ttige/Desktop/harsh/client/src/components/Paginate/Paginate.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","setPagIndexes","Paginate","paginate","handleNext","handleSupNext","handleSupPrev","handlePrev","dispatch","allRecipes","state","recipes","length","currentPage","setCurrentPage","recipesPerPage","indexOfLastRecipe","indexOfFirstRecipe","pagesDisplayLimit","maxPageDisplay","setMaxPageDisplay","minPageDisplay","setMinPageDisplay","pageNumbers","i","Math","ceil","push","map","number"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport \"./Paginate.css\";\r\n\r\n//action \r\nimport {setPagIndexes} from \"../../actions/index\";\r\n\r\n\r\n\r\nexport default function Paginate({paginate, handleNext, handleSupNext, handleSupPrev, handlePrev}) {\r\n\r\nconst dispatch = useDispatch();\r\nconst allRecipes = useSelector(state => state.recipes.length);\r\n\r\n// \r\n\r\nconst [currentPage, setCurrentPage] = useState(1);\r\nconst recipesPerPage= 9;\r\nconst indexOfLastRecipe = currentPage * recipesPerPage;   \r\nconst indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;\r\n\r\n\r\n\r\nconst pagesDisplayLimit = 5;\r\nconst [maxPageDisplay, setMaxPageDisplay] = useState(5); \r\nconst [minPageDisplay, setMinPageDisplay] = useState(1);\r\n\r\n  // actualizo el state del store con index last e index first\r\n  useEffect(\r\n    () => dispatch(setPagIndexes(indexOfLastRecipe, indexOfFirstRecipe)),\r\n    [indexOfLastRecipe, indexOfFirstRecipe, dispatch]\r\n  );\r\n\r\n  //* Reset to first page when recipes changes\r\n useEffect(() => {\r\n    setCurrentPage(1);\r\n    setMaxPageDisplay(5);\r\n    setMinPageDisplay(1);\r\n  }, [allRecipes]);\r\n\r\n  //* Calculate number of posssible pages\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  \r\n\r\n\r\n  //* functions to pass to prev/next page\r\n\r\n\r\n  \r\n\r\n  \r\n\r\n  return (\r\n   /*<nav className=\"btnPag\">\r\n      {pageNumbers &&\r\n        pageNumbers.map((number) => (\r\n        <button key={number} onClick={() => paginate(number)}>\r\n            {number}\r\n          </button>\r\n        ))}\r\n    </nav>\r\n  );*/\r\n\r\n  <nav className=\"btnPag\">\r\n      {pageNumbers.length === 0 ? (\r\n        <p></p>\r\n      ) : (\r\n        <div>\r\n          <button onClick={()=> handleSupPrev(currentPage)}>{\"<<\"}</button>\r\n          <button onClick={()=> handlePrev(currentPage)}>{\"<\"}</button>\r\n          {pageNumbers?.map(number => {\r\n            if (number <= maxPageDisplay && number >= minPageDisplay) {\r\n              return (\r\n                <button\r\n                  key={number}\r\n                  id={number}\r\n                  className={currentPage === number ? \"active\" : null}\r\n                  onClick={() => paginate(number)}\r\n                >\r\n                  {number}\r\n                </button>\r\n              );\r\n            } else {\r\n              return null;\r\n            }\r\n          })}\r\n          <button onClick={()=> handleNext(currentPage)}>{\">\"}</button>\r\n          <button onClick={()=> handleSupNext(currentPage)}>{\">>\"}</button>\r\n        </div>\r\n      )}\r\n    </nav>\r\n  );\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}