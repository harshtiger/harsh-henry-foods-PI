{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ttige\\\\Desktop\\\\harsh\\\\client\\\\src\\\\components\\\\putRecipe\\\\putRecipes.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\"; //? COMPONENTS\n//import ConfirmPopUp from \"./ConfirmPopUp\";\n//? ACTIONS\n\nimport { getDiets, getNameRecipe } from \"../store/actions\"; //? SERVICES\n//import axiosRecipeInfo from \"../services/getRecipeInfo\";\n//import axiosIngredients from \"../services/getIngredients\";\n\nimport putRecipe from \"../putRecipe/putRecipe\"; //import validateForm from \"../services/validateForm\";\n//? STYLES\n\n/*import { Container, Button, Title, Image, Time, Servings, Score } from \"./styles/AddRecipeSC\";\r\nimport { HealthScore, Diets, Summary, Ingredients, Procedure } from \"./styles/AddRecipeSC\";\r\nimport { BiTimeFive } from \"react-icons/bi\";\r\nimport { BsStar, BsFillPeopleFill } from \"react-icons/bs\";\r\nimport { GiHealthNormal, GiCheckMark } from \"react-icons/gi\";*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction validate(input) {\n  let errors = {};\n  input.title ? errors.title = \"\" : errors.title = \"You must name the recipe\";\n  input.summary ? errors.summary = \"\" : errors.summary = \"You must provide a summary\";\n  input.diets.length < 1 ? errors.diets = \"Choose at least one diet\" : errors.diets = \"\";\n\n  if (!input.image.includes(\"https://\") && !input.image.includes(\"http://\")) {\n    errors.image = \"This isn't a valid image address\";\n  } else {\n    errors.image = \"\";\n  }\n\n  return errors;\n}\n\nexport default function UpdateRecipe() {\n  _s();\n\n  const dispatch = useDispatch();\n  const diets = useSelector(state => state.diets); //const [ingredients, setIngredients] = useState([]);\n\n  const history = useHistory();\n  const {\n    id\n  } = useParams();\n  const [input, setInput] = useState({\n    title: \"\",\n    summary: \"\",\n    aggregateLikes: 0,\n    healthScore: 0,\n    analyzedInstructions: \"\",\n    image: \"\",\n    diets: []\n  }); //* Preload diets in store if empty\n\n  /*useEffect(() => {\r\n    if (diets.length === 0) {\r\n      dispatch(getDiets(dispatch));\r\n    }\r\n  }, [dispatch, diets.length]);*/\n\n  useEffect(() => {\n    dispatch(getDiets());\n  }, [dispatch]); //* Axios data on mount\n\n  /*useEffect(() => {\r\n    axiosRecipeInfo(\"db\", id)\r\n      .then(res => {\r\n        res.data.Diets = res.data.Diets.map(diet => {\r\n          for (let i = 0; i < diets.length; i++) {\r\n            if (diets[i].name === diet) {\r\n              return diets[i].id.toString();\r\n            }\r\n          }\r\n          return 0;\r\n        });\r\n        res.data.Ingredients = res.data.Ingredients.map(ingredient => {\r\n          for (let i = 0; i < ingredients.length; i++) {\r\n            if (ingredients[i].name === ingredient.name) {\r\n              return { id: ingredients[i].id.toString(), amount: ingredient.amount, unit: ingredient.unit };\r\n            }\r\n          }\r\n          return 0;\r\n        });\r\n        setInput(res.data);\r\n      })\r\n      .catch(err => console.error(err));\r\n  }, [id, diets, ingredients]);*/\n\n  function handleSelectDiet(e) {\n    setErrors(validate({ ...input,\n      diets: [...input.diets, e.target.value]\n    }));\n\n    if (!input.diets.includes(e.target.value)) {\n      setInput(input => ({ ...input,\n        diets: [...input.diets, e.target.value]\n      }));\n    }\n  }\n\n  const [errors, setErrors] = useState({});\n  const [updated, setUpdated] = useState(false); //const [popUp, setPopUp] = useState(false);\n  //* Function to add more steps\n\n  /*function handleClickAddStep(e) {\r\n    e.preventDefault();\r\n    const newStep = { number: input.Steps[input.Steps.length - 1].number + 1, content: \"\" };\r\n    setInput({ ...input, Steps: [...input.Steps, newStep] });\r\n  }*/\n  //* Function to rest last step\n\n  /*function handleClickRestStep(e) {\r\n    e.preventDefault();\r\n    const newSteps = input.Steps;\r\n    if (newSteps.length > 1) newSteps.pop();\r\n    setInput({ ...input, Steps: newSteps });\r\n  }*/\n  //* Function to add more ingredients\n\n  /*function handleClickAddIngredient(e) {\r\n    e.preventDefault();\r\n    setInput({ ...input, Ingredients: [...input.Ingredients, { id: \"\", amount: 0, unit: \"\" }] });\r\n  }\r\n    //* Function to rest last ingredient\r\n  function handleClickRestIngredient(e) {\r\n    e.preventDefault();\r\n    const newIngredients = input.Ingredients;\r\n    if (newIngredients.length > 1) newIngredients.pop();\r\n    setInput({ ...input, Ingredients: newIngredients });\r\n  }*/\n  //* Function to set input on description change\n\n  function handleOnChange(e) {\n    setInput({ ...input,\n      [e.target.name]: e.target.value\n    });\n  } //* Function to set input on diets change\n\n  /*function handleDietsOnChange(e) {\r\n    let dietsArray = input.Diets;\r\n    dietsArray = e.target.checked ? [...dietsArray, e.target.name] : dietsArray.filter(diet => diet !== e.target.name);\r\n    setInput({ ...input, Diets: dietsArray });\r\n  }*/\n  //* Function to find ingredient name from id\n\n  /*function findIngredientName(id) {\r\n    for (let i = 0; i < ingredients.length; i++) {\r\n      if (ingredients[i].id === parseInt(id)) {\r\n        return ingredients[i].name;\r\n      }\r\n    }\r\n  }\r\n    //* Function to set input on ingredients change\r\n  function handleIngredientsOnChange(e) {\r\n    let ingredientsArray = input.Ingredients;\r\n    ingredientsArray[e.target.id][e.target.name] = e.target.value;\r\n    setInput({ ...input, Ingredients: ingredientsArray });\r\n  }\r\n    //* Function to set input on steps change\r\n  function handleStepsOnChange(e) {\r\n    let stepsArray = input.Steps;\r\n    stepsArray[e.target.id - 1].content = e.target.value;\r\n    setInput({ ...input, Steps: stepsArray });\r\n  }*/\n\n\n  function handleChange(e) {\n    setInput(input => ({ ...input,\n      [e.target.name]: e.target.value\n    }));\n    setErrors(validate({ ...input,\n      [e.target.name]: e.target.value\n    }));\n  } //* Function to submit changes\n\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const errors = validate(input);\n    setErrors(errors);\n\n    if (Object.keys(errors).length === 0) {\n      setPopUp(true);\n    }\n  } //* Function to delete after PopUp\n\n\n  function aceptPopUp() {\n    putRecipe(input).then(response => {\n      setUpdated(true);\n      dispatch(getRecipes(\"\", dispatch));\n      setTimeout(() => {\n        history.push(`/home/recipe/db/${response.data.id}`);\n      }, 2000);\n    }).catch(error => console.error(error));\n    setPopUp(false);\n  } //* Function to cancel PopUp\n\n\n  function cancelPopUp() {\n    setPopUp(false);\n  } //* Function to return to Info\n\n\n  function goBack() {\n    setPopUp(false);\n    history.push(`/home/recipe/db/${id}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://i.ibb.co/nmWgfS3/IMG-4878.png\",\n        alt: \"tiger eating a bone\",\n        border: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this), \"Create your own Recipe here:\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleSubmit(e),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"form-title\",\n            children: \"Fill this form with your recipe details please \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Plate Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputCreate\",\n            placeholder: \"Complete here...\",\n            type: \"text\",\n            value: input.title,\n            name: \"title\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), errors.title && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: errors.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Summary:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputCreate\",\n            placeholder: \"Complete here...\",\n            type: \"text\",\n            value: input.summary,\n            name: \"summary\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), errors.summary && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: errors.summary\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Score:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputCreate\",\n            type: \"number\",\n            value: input.aggregateLikes,\n            name: \"aggregateLikes\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Health Level:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputCreate\",\n            type: \"number\",\n            value: input.healthScore,\n            name: \"healthScore\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"labelInstr\",\n            children: \"Instructions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            className: \"instruction\",\n            placeholder: \"Complete here...\",\n            rows: \"5\",\n            value: input.analyzedInstructions,\n            name: \"analyzedInstructions\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Image:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputCreate\",\n            type: \"text\",\n            placeholder: \"Example: https://...\",\n            value: input.image,\n            name: \"image\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this), errors.image && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: errors.image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dietsCreate\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Type of Diet:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => handleSelectDiet(e),\n            children: diets.map(d => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: d.name,\n              children: d.name\n            }, d.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), input.diets.map((d, i) => /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: d\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btnCreateD\",\n              onClick: e => handleDelete(e, d),\n              children: \"x\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 17\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this)), errors.diets && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: errors.diets\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btnCreate\",\n          children: \"Update Recipe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/home\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonToHome\",\n            children: \"Back to Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n  /*return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <Container>\r\n          <Title>\r\n            <label for=\"title\">{\"Title\"}</label>\r\n            {errors.title && <span className=\"error\"> {errors.title}</span>}\r\n            <input type=\"text\" name=\"title\" id=\"title\" value={input.title} onChange={handleOnChange} autoComplete=\"off\" autoFocus />\r\n          </Title>\r\n          <Image>\r\n            <label for=\"image\">Image URL</label>\r\n            <textarea name=\"image\" id=\"image\" value={input.image} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </Image>\r\n            <Time>\r\n            <BiTimeFive />\r\n            {errors.readyInMinutes && <p className=\"error\"> {errors.readyInMinutes}</p>}\r\n            <input type=\"number\" name=\"readyInMinutes\" value={input.readyInMinutes} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </Time>\r\n          <Servings>\r\n            <BsFillPeopleFill />\r\n            {errors.servings && <p className=\"error\"> {errors.servings}</p>}\r\n            <input type=\"number\" name=\"servings\" value={input.servings} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </Servings>\r\n          <Score>\r\n            <BsStar />\r\n            {errors.score && <p className=\"error\"> {errors.score}</p>}\r\n            <input type=\"number\" name=\"score\" value={input.score} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </Score>\r\n          <HealthScore>\r\n            <GiHealthNormal />\r\n            {errors.healthScore && <p className=\"error\"> {errors.healthScore}</p>}\r\n            <input type=\"number\" name=\"healthScore\" value={input.healthScore} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </HealthScore>\r\n            <Diets>\r\n            <label>{\"Diets\"}</label>\r\n            <div>\r\n              {diets.map(diet => (\r\n                <label key={diet.id}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name={diet.id}\r\n                    checked={input.Diets?.includes(diet.id.toString())}\r\n                    onChange={handleDietsOnChange}\r\n                  />\r\n                  {diet.name}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </Diets>\r\n            <Summary>\r\n            <label for=\"summary\">Summary</label>\r\n            {errors.summary && <span className=\"error\"> {errors.summary}</span>}\r\n            <textarea name=\"summary\" id=\"summary\" value={input.summary} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </Summary>\r\n            <Ingredients>\r\n            <div>\r\n              <label>Ingredients</label>\r\n              <button onClick={handleClickAddIngredient}>+</button>\r\n              <button onClick={handleClickRestIngredient}>-</button>\r\n            </div>\r\n            {input.Ingredients?.map((ingredient, index) => (\r\n              <div key={index}>\r\n                <select id={index} defaultValue=\"default\" name=\"id\" onChange={handleIngredientsOnChange}>\r\n                  <option value=\"default\" disabled>\r\n                    {findIngredientName(ingredient.id)}\r\n                  </option>\r\n                  {ingredients.map(ingredient => {\r\n                    return (\r\n                      <option key={ingredient.id} value={ingredient.id}>\r\n                        {ingredient.name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </select>\r\n                <input\r\n                  type=\"number\"\r\n                  id={index}\r\n                  name=\"amount\"\r\n                  defaultValue={ingredient.amount}\r\n                  onChange={handleIngredientsOnChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  id={index}\r\n                  name=\"unit\"\r\n                  defaultValue={ingredient.unit}\r\n                  onChange={handleIngredientsOnChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n              </div>\r\n            ))}\r\n          </Ingredients>\r\n            <Procedure>\r\n            <label>Procedure</label>\r\n            <button onClick={handleClickAddStep}>+</button>\r\n            <button onClick={handleClickRestStep}>-</button>\r\n            <ol>\r\n              {input.Steps?.map(step => (\r\n                <li key={step.number}>\r\n                  <input\r\n                    type=\"text\"\r\n                    id={step.number}\r\n                    name=\"content\"\r\n                    defaultValue={step.content}\r\n                    onChange={handleStepsOnChange}\r\n                    autoComplete=\"off\"\r\n                  />\r\n                </li>\r\n              ))}\r\n            </ol>\r\n          </Procedure>\r\n            <Button type=\"submit\" className={updated ? \"uploaded\" : false} disabled={updated}>\r\n            {updated ? <GiCheckMark /> : <span>SAVE</span>}\r\n          </Button>\r\n        </Container>\r\n      </form>\r\n      {popUp && (\r\n        <ConfirmPopUp\r\n          text=\"Are you sure you want to save changes??\"\r\n          aceptText=\"Save\"\r\n          cancelText=\"Cancel\"\r\n          aceptPopUp={aceptPopUp}\r\n          cancelPopUp={cancelPopUp}\r\n          thirdOptionText=\"Exit without saving\"\r\n          thirdOption={goBack}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n  }*/\n}\n\n_s(UpdateRecipe, \"784a+othqVey19U8K6UfsoXYLXg=\", false, function () {\n  return [useDispatch, useSelector, useHistory, useParams];\n});\n\n_c = UpdateRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateRecipe\");","map":{"version":3,"sources":["C:/Users/ttige/Desktop/harsh/client/src/components/putRecipe/putRecipes.jsx"],"names":["React","useState","useEffect","useHistory","useParams","useDispatch","useSelector","getDiets","getNameRecipe","putRecipe","validate","input","errors","title","summary","diets","length","image","includes","UpdateRecipe","dispatch","state","history","id","setInput","aggregateLikes","healthScore","analyzedInstructions","handleSelectDiet","e","setErrors","target","value","updated","setUpdated","handleOnChange","name","handleChange","handleSubmit","preventDefault","Object","keys","setPopUp","aceptPopUp","then","response","getRecipes","setTimeout","push","data","catch","error","console","cancelPopUp","goBack","map","d","i","handleDelete"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n//? COMPONENTS\r\n//import ConfirmPopUp from \"./ConfirmPopUp\";\r\n\r\n//? ACTIONS\r\nimport { getDiets, getNameRecipe } from \"../store/actions\";\r\n\r\n//? SERVICES\r\n//import axiosRecipeInfo from \"../services/getRecipeInfo\";\r\n//import axiosIngredients from \"../services/getIngredients\";\r\nimport putRecipe from \"../putRecipe/putRecipe\"\r\n//import validateForm from \"../services/validateForm\";\r\n\r\n//? STYLES\r\n/*import { Container, Button, Title, Image, Time, Servings, Score } from \"./styles/AddRecipeSC\";\r\nimport { HealthScore, Diets, Summary, Ingredients, Procedure } from \"./styles/AddRecipeSC\";\r\nimport { BiTimeFive } from \"react-icons/bi\";\r\nimport { BsStar, BsFillPeopleFill } from \"react-icons/bs\";\r\nimport { GiHealthNormal, GiCheckMark } from \"react-icons/gi\";*/\r\n\r\n\r\n\r\nfunction validate(input) {\r\n    let errors = {};\r\n    \r\n    input.title\r\n      ? (errors.title = \"\")\r\n      : (errors.title = \"You must name the recipe\");\r\n    input.summary\r\n      ? (errors.summary = \"\")\r\n      : (errors.summary = \"You must provide a summary\");\r\n    input.diets.length < 1\r\n      ? (errors.diets = \"Choose at least one diet\")\r\n      : (errors.diets = \"\");\r\n    if (!input.image.includes(\"https://\") && !input.image.includes(\"http://\")) {\r\n      errors.image = \"This isn't a valid image address\";\r\n    } else {\r\n      errors.image = \"\";\r\n    }\r\n    return errors;\r\n  }\r\n\r\n\r\n\r\nexport default function UpdateRecipe() {\r\n  const dispatch = useDispatch();\r\n  const diets = useSelector(state => state.diets);\r\n  //const [ingredients, setIngredients] = useState([]);\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n\r\n  const [input, setInput] = useState({\r\n    title: \"\",\r\n        summary: \"\",\r\n        aggregateLikes: 0,\r\n        healthScore: 0,\r\n        analyzedInstructions: \"\",\r\n        image: \"\",\r\n        diets: [],\r\n  });\r\n\r\n  //* Preload diets in store if empty\r\n  /*useEffect(() => {\r\n    if (diets.length === 0) {\r\n      dispatch(getDiets(dispatch));\r\n    }\r\n  }, [dispatch, diets.length]);*/\r\n  \r\n  useEffect(() => {\r\n    dispatch(getDiets());\r\n  }, [dispatch]);\r\n\r\n\r\n  \r\n\r\n  //* Axios data on mount\r\n  /*useEffect(() => {\r\n    axiosRecipeInfo(\"db\", id)\r\n      .then(res => {\r\n        res.data.Diets = res.data.Diets.map(diet => {\r\n          for (let i = 0; i < diets.length; i++) {\r\n            if (diets[i].name === diet) {\r\n              return diets[i].id.toString();\r\n            }\r\n          }\r\n          return 0;\r\n        });\r\n        res.data.Ingredients = res.data.Ingredients.map(ingredient => {\r\n          for (let i = 0; i < ingredients.length; i++) {\r\n            if (ingredients[i].name === ingredient.name) {\r\n              return { id: ingredients[i].id.toString(), amount: ingredient.amount, unit: ingredient.unit };\r\n            }\r\n          }\r\n          return 0;\r\n        });\r\n        setInput(res.data);\r\n      })\r\n      .catch(err => console.error(err));\r\n  }, [id, diets, ingredients]);*/\r\n\r\n  function handleSelectDiet(e) {\r\n   \r\n    setErrors(\r\n      validate({\r\n        ...input,\r\n        diets: [...input.diets, e.target.value],\r\n      })\r\n    );\r\n    if(!input.diets.includes(e.target.value)){\r\n    setInput((input) => ({\r\n      ...input,\r\n      diets: [...input.diets, e.target.value],\r\n    }));\r\n  }\r\n  }\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [updated, setUpdated] = useState(false);\r\n\r\n  //const [popUp, setPopUp] = useState(false);\r\n\r\n  //* Function to add more steps\r\n  /*function handleClickAddStep(e) {\r\n    e.preventDefault();\r\n    const newStep = { number: input.Steps[input.Steps.length - 1].number + 1, content: \"\" };\r\n    setInput({ ...input, Steps: [...input.Steps, newStep] });\r\n  }*/\r\n\r\n  //* Function to rest last step\r\n  /*function handleClickRestStep(e) {\r\n    e.preventDefault();\r\n    const newSteps = input.Steps;\r\n    if (newSteps.length > 1) newSteps.pop();\r\n    setInput({ ...input, Steps: newSteps });\r\n  }*/\r\n\r\n  //* Function to add more ingredients\r\n  /*function handleClickAddIngredient(e) {\r\n    e.preventDefault();\r\n    setInput({ ...input, Ingredients: [...input.Ingredients, { id: \"\", amount: 0, unit: \"\" }] });\r\n  }\r\n\r\n  //* Function to rest last ingredient\r\n  function handleClickRestIngredient(e) {\r\n    e.preventDefault();\r\n    const newIngredients = input.Ingredients;\r\n    if (newIngredients.length > 1) newIngredients.pop();\r\n    setInput({ ...input, Ingredients: newIngredients });\r\n  }*/\r\n\r\n  //* Function to set input on description change\r\n  function handleOnChange(e) {\r\n    setInput({ ...input, [e.target.name]: e.target.value });\r\n  }\r\n\r\n  //* Function to set input on diets change\r\n  /*function handleDietsOnChange(e) {\r\n    let dietsArray = input.Diets;\r\n    dietsArray = e.target.checked ? [...dietsArray, e.target.name] : dietsArray.filter(diet => diet !== e.target.name);\r\n    setInput({ ...input, Diets: dietsArray });\r\n  }*/\r\n\r\n  //* Function to find ingredient name from id\r\n  /*function findIngredientName(id) {\r\n    for (let i = 0; i < ingredients.length; i++) {\r\n      if (ingredients[i].id === parseInt(id)) {\r\n        return ingredients[i].name;\r\n      }\r\n    }\r\n  }\r\n\r\n  //* Function to set input on ingredients change\r\n  function handleIngredientsOnChange(e) {\r\n    let ingredientsArray = input.Ingredients;\r\n    ingredientsArray[e.target.id][e.target.name] = e.target.value;\r\n    setInput({ ...input, Ingredients: ingredientsArray });\r\n  }\r\n\r\n  //* Function to set input on steps change\r\n  function handleStepsOnChange(e) {\r\n    let stepsArray = input.Steps;\r\n    stepsArray[e.target.id - 1].content = e.target.value;\r\n    setInput({ ...input, Steps: stepsArray });\r\n  }*/\r\n  function handleChange(e) {\r\n    setInput((input) => ({\r\n      ...input,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n    setErrors(\r\n      validate({\r\n        ...input,\r\n        [e.target.name]: e.target.value,\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  //* Function to submit changes\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const errors = validate(input);\r\n    setErrors(errors);\r\n    if (Object.keys(errors).length === 0) {\r\n      setPopUp(true);\r\n    }\r\n  }\r\n\r\n  //* Function to delete after PopUp\r\n  function aceptPopUp() {\r\n    putRecipe(input)\r\n      .then(response => {\r\n        setUpdated(true);\r\n        dispatch(getRecipes(\"\", dispatch));\r\n        setTimeout(() => {\r\n          history.push(`/home/recipe/db/${response.data.id}`);\r\n        }, 2000);\r\n      })\r\n      .catch(error => console.error(error));\r\n    setPopUp(false);\r\n  }\r\n\r\n  //* Function to cancel PopUp\r\n  function cancelPopUp() {\r\n    setPopUp(false);\r\n  }\r\n\r\n  //* Function to return to Info\r\n  function goBack() {\r\n    setPopUp(false);\r\n    history.push(`/home/recipe/db/${id}`);\r\n  }\r\n\r\n  return (\r\n    <div className=\"create\">\r\n    \r\n      <h1><img src=\"https://i.ibb.co/nmWgfS3/IMG-4878.png\" alt=\"tiger eating a bone\" border=\"0\"/>Create your own Recipe here:</h1>\r\n      <div className=\"form\">\r\n        <form onSubmit={(e) => handleSubmit(e)}>\r\n          <div>\r\n            <h2 className=\"form-title\">Fill this form with your recipe details please </h2>\r\n          </div>\r\n          <div>\r\n            <label>Plate Name:</label>\r\n            <input\r\n              className=\"inputCreate\"\r\n              placeholder=\"Complete here...\"\r\n              type=\"text\"\r\n              value={input.title}\r\n              name=\"title\"\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n            {errors.title && <p>{errors.title}</p>}\r\n          </div>\r\n          <div>\r\n            <label>Summary:</label>\r\n            <input\r\n              className=\"inputCreate\"\r\n              placeholder=\"Complete here...\"\r\n              type=\"text\"\r\n              value={input.summary}\r\n              name=\"summary\"\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n            {errors.summary && <p>{errors.summary}</p>}\r\n          </div>\r\n          <div>\r\n            <label>Score:</label>\r\n            <input\r\n              className=\"inputCreate\"\r\n              type=\"number\"\r\n              value={input.aggregateLikes}\r\n              name=\"aggregateLikes\"\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Health Level:</label>\r\n            <input\r\n              className=\"inputCreate\"\r\n              type=\"number\"\r\n              value={input.healthScore}\r\n              name=\"healthScore\"\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"labelInstr\">Instructions:</label>\r\n            <textarea\r\n              type=\"text\"\r\n              className=\"instruction\"\r\n              placeholder=\"Complete here...\"\r\n              rows=\"5\"\r\n              value={input.analyzedInstructions}\r\n              name=\"analyzedInstructions\"\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Image:</label>\r\n            <input\r\n              className=\"inputCreate\"\r\n              type=\"text\"\r\n              placeholder=\"Example: https://...\"\r\n              value={input.image}\r\n              name=\"image\"\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n            {errors.image && <p>{errors.image}</p>}\r\n          </div>\r\n          <div className=\"dietsCreate\">\r\n            <span>Type of Diet:</span>\r\n            <select onChange={(e) => handleSelectDiet(e)}>\r\n              {diets.map((d) => (\r\n                <option value={d.name} key={d.name}>\r\n                  {d.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {input.diets.map((d, i) => (\r\n              <ul key={i}>\r\n                <p>{d}</p>\r\n                <button className=\"btnCreateD\" onClick={(e) => handleDelete(e, d)}>x</button>\r\n              </ul>\r\n            ))}\r\n            {errors.diets && <p>{errors.diets}</p>}\r\n          </div>\r\n          <button type=\"submit\" className=\"btnCreate\">\r\n            Update Recipe\r\n          </button>\r\n          <Link to=\"/home\">\r\n        <button className=\"buttonToHome\">Back to Home</button>\r\n      </Link>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n\r\n  /*return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <Container>\r\n          <Title>\r\n            <label for=\"title\">{\"Title\"}</label>\r\n            {errors.title && <span className=\"error\"> {errors.title}</span>}\r\n            <input type=\"text\" name=\"title\" id=\"title\" value={input.title} onChange={handleOnChange} autoComplete=\"off\" autoFocus />\r\n          </Title>\r\n          <Image>\r\n            <label for=\"image\">Image URL</label>\r\n            <textarea name=\"image\" id=\"image\" value={input.image} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </Image>\r\n\r\n          <Time>\r\n            <BiTimeFive />\r\n            {errors.readyInMinutes && <p className=\"error\"> {errors.readyInMinutes}</p>}\r\n            <input type=\"number\" name=\"readyInMinutes\" value={input.readyInMinutes} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </Time>\r\n          <Servings>\r\n            <BsFillPeopleFill />\r\n            {errors.servings && <p className=\"error\"> {errors.servings}</p>}\r\n            <input type=\"number\" name=\"servings\" value={input.servings} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </Servings>\r\n          <Score>\r\n            <BsStar />\r\n            {errors.score && <p className=\"error\"> {errors.score}</p>}\r\n            <input type=\"number\" name=\"score\" value={input.score} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </Score>\r\n          <HealthScore>\r\n            <GiHealthNormal />\r\n            {errors.healthScore && <p className=\"error\"> {errors.healthScore}</p>}\r\n            <input type=\"number\" name=\"healthScore\" value={input.healthScore} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </HealthScore>\r\n\r\n          <Diets>\r\n            <label>{\"Diets\"}</label>\r\n            <div>\r\n              {diets.map(diet => (\r\n                <label key={diet.id}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name={diet.id}\r\n                    checked={input.Diets?.includes(diet.id.toString())}\r\n                    onChange={handleDietsOnChange}\r\n                  />\r\n                  {diet.name}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </Diets>\r\n\r\n          <Summary>\r\n            <label for=\"summary\">Summary</label>\r\n            {errors.summary && <span className=\"error\"> {errors.summary}</span>}\r\n            <textarea name=\"summary\" id=\"summary\" value={input.summary} onChange={handleOnChange} autoComplete=\"off\" />\r\n          </Summary>\r\n\r\n          <Ingredients>\r\n            <div>\r\n              <label>Ingredients</label>\r\n              <button onClick={handleClickAddIngredient}>+</button>\r\n              <button onClick={handleClickRestIngredient}>-</button>\r\n            </div>\r\n            {input.Ingredients?.map((ingredient, index) => (\r\n              <div key={index}>\r\n                <select id={index} defaultValue=\"default\" name=\"id\" onChange={handleIngredientsOnChange}>\r\n                  <option value=\"default\" disabled>\r\n                    {findIngredientName(ingredient.id)}\r\n                  </option>\r\n                  {ingredients.map(ingredient => {\r\n                    return (\r\n                      <option key={ingredient.id} value={ingredient.id}>\r\n                        {ingredient.name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </select>\r\n                <input\r\n                  type=\"number\"\r\n                  id={index}\r\n                  name=\"amount\"\r\n                  defaultValue={ingredient.amount}\r\n                  onChange={handleIngredientsOnChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  id={index}\r\n                  name=\"unit\"\r\n                  defaultValue={ingredient.unit}\r\n                  onChange={handleIngredientsOnChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n              </div>\r\n            ))}\r\n          </Ingredients>\r\n\r\n          <Procedure>\r\n            <label>Procedure</label>\r\n            <button onClick={handleClickAddStep}>+</button>\r\n            <button onClick={handleClickRestStep}>-</button>\r\n            <ol>\r\n              {input.Steps?.map(step => (\r\n                <li key={step.number}>\r\n                  <input\r\n                    type=\"text\"\r\n                    id={step.number}\r\n                    name=\"content\"\r\n                    defaultValue={step.content}\r\n                    onChange={handleStepsOnChange}\r\n                    autoComplete=\"off\"\r\n                  />\r\n                </li>\r\n              ))}\r\n            </ol>\r\n          </Procedure>\r\n\r\n          <Button type=\"submit\" className={updated ? \"uploaded\" : false} disabled={updated}>\r\n            {updated ? <GiCheckMark /> : <span>SAVE</span>}\r\n          </Button>\r\n        </Container>\r\n      </form>\r\n      {popUp && (\r\n        <ConfirmPopUp\r\n          text=\"Are you sure you want to save changes??\"\r\n          aceptText=\"Save\"\r\n          cancelText=\"Cancel\"\r\n          aceptPopUp={aceptPopUp}\r\n          cancelPopUp={cancelPopUp}\r\n          thirdOptionText=\"Exit without saving\"\r\n          thirdOption={goBack}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}*/\r\n}\r\n"]},"metadata":{},"sourceType":"module"}