{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ttige\\\\Desktop\\\\harsh\\\\client\\\\src\\\\components\\\\Paginate\\\\Paginate.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./Paginate.css\"; //action \n\nimport { PAG_INDEXES } from \"../../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Paginate() {\n  _s();\n\n  const dispatch = useDispatch(); // \n\n  const allRecipes = useSelector(state => state.recipes);\n  const [currentPage, setCurrentPage] = useState(1);\n  const recipesPerPage = 9;\n  const indexOfLastRecipe = currentPage * recipesPerPage;\n  const indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;\n  const pagesDisplayLimit = 5;\n  const [maxPageDisplay, setMaxPageDisplay] = useState(5);\n  const [minPageDisplay, setMinPageDisplay] = useState(1); // actualizo el state del store con index last e index first\n\n  useEffect(() => dispatch(PAG_INDEXES(indexOfLastRecipe, indexOfFirstRecipe)), [indexOfLastRecipe, indexOfFirstRecipe, dispatch]); //* Reset to first page when recipes changes\n\n  useEffect(() => {\n    setCurrentPage(1);\n    setMaxPageDisplay(5);\n    setMinPageDisplay(1);\n  }, [allRecipes]); //* Calculate number of posssible pages\n\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\n    pageNumbers.push(i);\n  } //* paso de pagina con click\n\n\n  const handleClick = e => {\n    setCurrentPage(Number(e.target.id));\n  }; //* functions to pass to prev/next page\n\n\n  const handleSupPrev = () => {\n    if (currentPage !== 1) {\n      setCurrentPage(1);\n      setMaxPageDisplay(5);\n      setMinPageDisplay(1);\n    }\n  };\n\n  const handlePrev = () => {\n    if (currentPage !== 1) {\n      setCurrentPage(currentPage - 1);\n\n      if (currentPage - 1 < minPageDisplay) {\n        setMaxPageDisplay(maxPageDisplay - pagesDisplayLimit < 5 ? 5 : maxPageDisplay - pagesDisplayLimit);\n        setMinPageDisplay(minPageDisplay - pagesDisplayLimit <= 0 ? 1 : minPageDisplay - pagesDisplayLimit);\n      }\n    }\n  };\n\n  const handleNext = () => {\n    if (currentPage !== pageNumbers.length) {\n      setCurrentPage(currentPage + 1);\n\n      if (currentPage + 1 > maxPageDisplay) {\n        setMaxPageDisplay(maxPageDisplay + pagesDisplayLimit);\n        setMinPageDisplay(minPageDisplay + pagesDisplayLimit);\n      }\n    }\n  };\n\n  const handleSupNext = () => {\n    const lastPage = pageNumbers.length;\n\n    if (currentPage !== lastPage) {\n      setCurrentPage(lastPage);\n      setMaxPageDisplay(lastPage);\n      setMinPageDisplay(lastPage - pagesDisplayLimit + 1);\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /*<nav className=\"btnPag\">\r\n       {pageNumbers &&\r\n         pageNumbers.map((number) => (\r\n         <button key={number} onClick={() => paginate(number)}>\r\n             {number}\r\n           </button>\r\n         ))}\r\n     </nav>\r\n    );*/\n    _jsxDEV(\"nav\", {\n      className: \"btnPag\",\n      children: pageNumbers.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSupPrev,\n          children: \"<<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePrev,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), pageNumbers === null || pageNumbers === void 0 ? void 0 : pageNumbers.map(number => {\n          if (number <= maxPageDisplay && number >= minPageDisplay) {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              id: number,\n              className: currentPage === number ? \"active\" : null,\n              onClick: handleClick,\n              children: number\n            }, number, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this);\n          } else {\n            return null;\n          }\n        }), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNext,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSupNext,\n          children: \">>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 3\n    }, this)\n  );\n}\n\n_s(Paginate, \"YTen9/st/R5q4BuZwuXtzZiKqAQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Paginate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginate\");","map":{"version":3,"sources":["C:/Users/ttige/Desktop/harsh/client/src/components/Paginate/Paginate.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","PAG_INDEXES","Paginate","dispatch","allRecipes","state","recipes","currentPage","setCurrentPage","recipesPerPage","indexOfLastRecipe","indexOfFirstRecipe","pagesDisplayLimit","maxPageDisplay","setMaxPageDisplay","minPageDisplay","setMinPageDisplay","pageNumbers","i","Math","ceil","push","handleClick","e","Number","target","id","handleSupPrev","handlePrev","handleNext","length","handleSupNext","lastPage","map","number"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport \"./Paginate.css\";\r\n\r\n//action \r\nimport {PAG_INDEXES} from \"../../actions\";\r\n\r\n\r\n\r\nexport default function Paginate() {\r\n\r\nconst dispatch = useDispatch();\r\n\r\n\r\n// \r\nconst allRecipes = useSelector((state) => state.recipes);\r\nconst [currentPage, setCurrentPage] = useState(1);\r\nconst recipesPerPage= 9;\r\nconst indexOfLastRecipe = currentPage * recipesPerPage;   \r\nconst indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;\r\n\r\n\r\n\r\nconst pagesDisplayLimit = 5;\r\nconst [maxPageDisplay, setMaxPageDisplay] = useState(5); \r\nconst [minPageDisplay, setMinPageDisplay] = useState(1);\r\n\r\n  // actualizo el state del store con index last e index first\r\n  useEffect(\r\n    () => dispatch(PAG_INDEXES(indexOfLastRecipe, indexOfFirstRecipe)),\r\n    [indexOfLastRecipe, indexOfFirstRecipe, dispatch]\r\n  );\r\n\r\n  //* Reset to first page when recipes changes\r\n useEffect(() => {\r\n    setCurrentPage(1);\r\n    setMaxPageDisplay(5);\r\n    setMinPageDisplay(1);\r\n  }, [allRecipes]);\r\n\r\n  //* Calculate number of posssible pages\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  //* paso de pagina con click\r\n  const handleClick = e => {\r\n    setCurrentPage(Number(e.target.id));\r\n  };\r\n\r\n  //* functions to pass to prev/next page\r\n  const handleSupPrev = () => {\r\n    if (currentPage !== 1) {\r\n      setCurrentPage(1);\r\n      setMaxPageDisplay(5);\r\n      setMinPageDisplay(1);\r\n    }\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    if (currentPage !== 1) {\r\n      setCurrentPage(currentPage - 1);\r\n      if (currentPage - 1 < minPageDisplay) {\r\n        setMaxPageDisplay(\r\n          maxPageDisplay - pagesDisplayLimit < 5 ? 5 : maxPageDisplay - pagesDisplayLimit\r\n        );\r\n        setMinPageDisplay(\r\n          minPageDisplay - pagesDisplayLimit <= 0 ? 1 : minPageDisplay - pagesDisplayLimit\r\n        );\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  const handleNext = () => {\r\n    if (currentPage !== pageNumbers.length) {\r\n      setCurrentPage(currentPage + 1);\r\n      if (currentPage + 1 > maxPageDisplay) {\r\n        setMaxPageDisplay(maxPageDisplay + pagesDisplayLimit);\r\n        setMinPageDisplay(minPageDisplay + pagesDisplayLimit);\r\n      }\r\n    }\r\n  };\r\n  const handleSupNext = () => {\r\n    const lastPage = pageNumbers.length;\r\n    if (currentPage !== lastPage) {\r\n      setCurrentPage(lastPage);\r\n      setMaxPageDisplay(lastPage);\r\n      setMinPageDisplay(lastPage - pagesDisplayLimit + 1);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n   /*<nav className=\"btnPag\">\r\n      {pageNumbers &&\r\n        pageNumbers.map((number) => (\r\n        <button key={number} onClick={() => paginate(number)}>\r\n            {number}\r\n          </button>\r\n        ))}\r\n    </nav>\r\n  );*/\r\n\r\n  <nav className=\"btnPag\">\r\n      {pageNumbers.length === 0 ? (\r\n        <p></p>\r\n      ) : (\r\n        <div>\r\n          <button onClick={handleSupPrev}>{\"<<\"}</button>\r\n          <button onClick={handlePrev}>{\"<\"}</button>\r\n          {pageNumbers?.map(number => {\r\n            if (number <= maxPageDisplay && number >= minPageDisplay) {\r\n              return (\r\n                <button\r\n                  key={number}\r\n                  id={number}\r\n                  className={currentPage === number ? \"active\" : null}\r\n                  onClick={handleClick}\r\n                >\r\n                  {number}\r\n                </button>\r\n              );\r\n            } else {\r\n              return null;\r\n            }\r\n          })}\r\n          <button onClick={handleNext}>{\">\"}</button>\r\n          <button onClick={handleSupNext}>{\">>\"}</button>\r\n        </div>\r\n      )}\r\n    </nav>\r\n  );\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}