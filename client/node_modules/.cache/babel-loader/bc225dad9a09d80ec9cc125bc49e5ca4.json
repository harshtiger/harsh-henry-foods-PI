{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ttige\\\\Desktop\\\\harsh\\\\client\\\\src\\\\components\\\\Paginate\\\\Paginates.jsx\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Paginate from \"./Paginate\"; //? ACTIONS\n//import { setPagIndexes } from \"../../actions\";\n//? STYLES\n//import { PagesList, PageNumber } from \"./styles/PaginationSC\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Paginates(_ref) {\n  let {\n    currentPage,\n    recipesPerPage,\n    allRecipes,\n    paginate,\n    handleNext,\n    handleSupNext,\n    handleSupPrev,\n    handlePrev,\n    maxPageDisplay,\n    minPageDisplay\n  } = _ref;\n  //const dispatch = useDispatch();\n  //const recipesLenght = useSelector(state => state.recipes.length);\n  //const [currentPage, setCurrentPage] = useState(1);\n  //const recipesxPage = 9;\n  //const indexLastRecipe = currentPage * recipesxPage;\n  //const indexFirstRecipe = indexLastRecipe - recipesxPage;\n  //const pagesDisplayLimit = 5;\n  //const [maxPageDisplay, setMaxPageDisplay] = useState(5);\n  //const [minPageDisplay, setMinPageDisplay] = useState(1);\n  //* Update store with indexLastRecipe & indexFirstRecipe\n  // useEffect(\n  //  () => dispatch(setPaginationIndexes(indexLastRecipe, indexFirstRecipe)),\n  // [indexLastRecipe, indexFirstRecipe, dispatch]\n  //);\n  //* Reset to first page when recipes changes\n\n  /*useEffect(() => {\r\n    setCurrentPage(1);\r\n    setMaxPageDisplay(5);\r\n    setMinPageDisplay(1);\r\n  }, [recipesLenght]);*/\n  //* Calculate number of posssible pages\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\n    pageNumbers.push(i);\n  } //* function to set page number by click\n\n  /*const handleClick = e => {\r\n    setCurrentPage(Number(e.target.id));\r\n  };*/\n  //* functions to pass to prev/next page\n\n  /*const handleSupPrev = () => {\r\n    if (currentPage !== 1) {\r\n      setCurrentPage(1);\r\n      setMaxPageDisplay(5);\r\n      setMinPageDisplay(1);\r\n    }\r\n  };\r\n  const handlePrev = () => {\r\n    if (currentPage !== 1) {\r\n      setCurrentPage(currentPage - 1);\r\n      if (currentPage - 1 < minPageDisplay) {\r\n        setMaxPageDisplay(\r\n          maxPageDisplay - pagesDisplayLimit < 5 ? 5 : maxPageDisplay - pagesDisplayLimit\r\n        );\r\n        setMinPageDisplay(\r\n          minPageDisplay - pagesDisplayLimit <= 0 ? 1 : minPageDisplay - pagesDisplayLimit\r\n        );\r\n      }\r\n    }\r\n  };\r\n  const handleNext = () => {\r\n    if (currentPage !== pageNumbers.length) {\r\n      setCurrentPage(currentPage + 1);\r\n      if (currentPage + 1 > maxPageDisplay) {\r\n        setMaxPageDisplay(maxPageDisplay + pagesDisplayLimit);\r\n        setMinPageDisplay(minPageDisplay + pagesDisplayLimit);\r\n      }\r\n    }\r\n  };\r\n  const handleSupNext = () => {\r\n    const lastPage = pageNumbers.length;\r\n    if (currentPage !== lastPage) {\r\n      setCurrentPage(lastPage);\r\n      setMaxPageDisplay(lastPage);\r\n      setMinPageDisplay(lastPage - pagesDisplayLimit + 1);\r\n    }\r\n  };*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    children: pageNumbers.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSupPrev,\n        children: \"<<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrev,\n        children: \"<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), pageNumbers === null || pageNumbers === void 0 ? void 0 : pageNumbers.map(number => {\n        if (number <= maxPageDisplay && number >= minPageDisplay) {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            id: number,\n            className: currentPage === number ? \"active\" : null,\n            onClick: () => paginate(number),\n            children: number\n          }, number, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this);\n        } else {\n          return null;\n        }\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: currentPage == Math.ceil(allRecipes / recipesPerPage),\n        onClick: handleNext,\n        children: \">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSupNext,\n        children: \">>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_c = Paginates;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginates\");","map":{"version":3,"sources":["C:/Users/ttige/Desktop/harsh/client/src/components/Paginate/Paginates.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","Paginate","Paginates","currentPage","recipesPerPage","allRecipes","paginate","handleNext","handleSupNext","handleSupPrev","handlePrev","maxPageDisplay","minPageDisplay","pageNumbers","i","Math","ceil","push","length","map","number"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;AACA;AAEA;AACA;;;AAEA,eAAe,SAASC,SAAT,OAA8J;AAAA,MAA3I;AAACC,IAAAA,WAAD;AAAeC,IAAAA,cAAf;AAA+BC,IAAAA,UAA/B;AAA2CC,IAAAA,QAA3C;AAAqDC,IAAAA,UAArD;AAAiEC,IAAAA,aAAjE;AAA+EC,IAAAA,aAA/E;AAA8FC,IAAAA,UAA9F;AAA0GC,IAAAA,cAA1G;AAA0HC,IAAAA;AAA1H,GAA2I;AAC3K;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACD;AACC;AACC;AACD;AAEA;;AACA;AACF;AACA;AACA;AACA;AAEE;AACA,QAAMC,WAAW,GAAG,EAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIC,IAAI,CAACC,IAAL,CAAUX,UAAU,GAAGD,cAAvB,CAArB,EAA6DU,CAAC,EAA9D,EAAkE;AAChED,IAAAA,WAAW,CAACI,IAAZ,CAAiBH,CAAjB;AACD,GA7B0K,CA+B3K;;AACA;AACF;AACA;AAEE;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,sBACE;AAAA,cACGD,WAAW,CAACK,MAAZ,KAAuB,CAAvB,gBACC;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAET,aAAjB;AAAA,kBAAiC;AAAjC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEC,UAAjB;AAAA,kBAA8B;AAA9B;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGG,WAHH,aAGGA,WAHH,uBAGGA,WAAW,CAAEM,GAAb,CAAiBC,MAAM,IAAI;AAC1B,YAAIA,MAAM,IAAIT,cAAV,IAA4BS,MAAM,IAAIR,cAA1C,EAA0D;AACxD,8BACE;AAEE,YAAA,EAAE,EAAEQ,MAFN;AAGE,YAAA,SAAS,EAAEjB,WAAW,KAAKiB,MAAhB,GAAyB,QAAzB,GAAoC,IAHjD;AAIE,YAAA,OAAO,EAAE,MAAMd,QAAQ,CAACc,MAAD,CAJzB;AAAA,sBAMGA;AANH,aACOA,MADP;AAAA;AAAA;AAAA;AAAA,kBADF;AAUD,SAXD,MAWO;AACL,iBAAO,IAAP;AACD;AACF,OAfA,CAHH,eAmBE;AAAQ,QAAA,QAAQ,EAAEjB,WAAW,IAAIY,IAAI,CAACC,IAAL,CAAUX,UAAU,GAAGD,cAAvB,CAAjC;AACA,QAAA,OAAO,EAAEG,UADT;AAAA,kBACsB;AADtB;AAAA;AAAA;AAAA;AAAA,cAnBF,eAqBE;AAAQ,QAAA,OAAO,EAAEC,aAAjB;AAAA,kBAAiC;AAAjC;AAAA;AAAA;AAAA;AAAA,cArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD;KA1GuBN,S","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Paginate from \"./Paginate\";\r\n\r\n//? ACTIONS\r\n//import { setPagIndexes } from \"../../actions\";\r\n\r\n//? STYLES\r\n//import { PagesList, PageNumber } from \"./styles/PaginationSC\";\r\n\r\nexport default function Paginates({currentPage,  recipesPerPage, allRecipes, paginate, handleNext, handleSupNext,handleSupPrev, handlePrev, maxPageDisplay, minPageDisplay}) {\r\n  //const dispatch = useDispatch();\r\n  //const recipesLenght = useSelector(state => state.recipes.length);\r\n\r\n  //const [currentPage, setCurrentPage] = useState(1);\r\n  //const recipesxPage = 9;\r\n  //const indexLastRecipe = currentPage * recipesxPage;\r\n  //const indexFirstRecipe = indexLastRecipe - recipesxPage;\r\n  //const pagesDisplayLimit = 5;\r\n  //const [maxPageDisplay, setMaxPageDisplay] = useState(5);\r\n  //const [minPageDisplay, setMinPageDisplay] = useState(1);\r\n\r\n  //* Update store with indexLastRecipe & indexFirstRecipe\r\n // useEffect(\r\n  //  () => dispatch(setPaginationIndexes(indexLastRecipe, indexFirstRecipe)),\r\n   // [indexLastRecipe, indexFirstRecipe, dispatch]\r\n  //);\r\n\r\n  //* Reset to first page when recipes changes\r\n  /*useEffect(() => {\r\n    setCurrentPage(1);\r\n    setMaxPageDisplay(5);\r\n    setMinPageDisplay(1);\r\n  }, [recipesLenght]);*/\r\n\r\n  //* Calculate number of posssible pages\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  //* function to set page number by click\r\n  /*const handleClick = e => {\r\n    setCurrentPage(Number(e.target.id));\r\n  };*/\r\n\r\n  //* functions to pass to prev/next page\r\n  /*const handleSupPrev = () => {\r\n    if (currentPage !== 1) {\r\n      setCurrentPage(1);\r\n      setMaxPageDisplay(5);\r\n      setMinPageDisplay(1);\r\n    }\r\n  };\r\n  const handlePrev = () => {\r\n    if (currentPage !== 1) {\r\n      setCurrentPage(currentPage - 1);\r\n      if (currentPage - 1 < minPageDisplay) {\r\n        setMaxPageDisplay(\r\n          maxPageDisplay - pagesDisplayLimit < 5 ? 5 : maxPageDisplay - pagesDisplayLimit\r\n        );\r\n        setMinPageDisplay(\r\n          minPageDisplay - pagesDisplayLimit <= 0 ? 1 : minPageDisplay - pagesDisplayLimit\r\n        );\r\n      }\r\n    }\r\n  };\r\n  const handleNext = () => {\r\n    if (currentPage !== pageNumbers.length) {\r\n      setCurrentPage(currentPage + 1);\r\n      if (currentPage + 1 > maxPageDisplay) {\r\n        setMaxPageDisplay(maxPageDisplay + pagesDisplayLimit);\r\n        setMinPageDisplay(minPageDisplay + pagesDisplayLimit);\r\n      }\r\n    }\r\n  };\r\n  const handleSupNext = () => {\r\n    const lastPage = pageNumbers.length;\r\n    if (currentPage !== lastPage) {\r\n      setCurrentPage(lastPage);\r\n      setMaxPageDisplay(lastPage);\r\n      setMinPageDisplay(lastPage - pagesDisplayLimit + 1);\r\n    }\r\n  };*/\r\n\r\n  return (\r\n    <nav>\r\n      {pageNumbers.length === 0 ? (\r\n        <p></p>\r\n      ) : (\r\n        <div>\r\n          <button onClick={handleSupPrev}>{\"<<\"}</button>\r\n          <button onClick={handlePrev}>{\"<\"}</button>\r\n          {pageNumbers?.map(number => {\r\n            if (number <= maxPageDisplay && number >= minPageDisplay) {\r\n              return (\r\n                <button\r\n                  key={number}\r\n                  id={number}\r\n                  className={currentPage === number ? \"active\" : null}\r\n                  onClick={() => paginate(number)}\r\n                >\r\n                  {number}\r\n                </button>\r\n              );\r\n            } else {\r\n              return null;\r\n            }\r\n          })}\r\n          <button disabled={currentPage == Math.ceil(allRecipes / recipesPerPage)}\r\n          onClick={handleNext}>{\">\"}</button>\r\n          <button onClick={handleSupNext}>{\">>\"}</button>\r\n        </div>\r\n      )}\r\n    </nav>\r\n  );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}