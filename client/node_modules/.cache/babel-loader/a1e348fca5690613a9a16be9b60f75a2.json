{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ttige\\\\Desktop\\\\harsh\\\\client\\\\src\\\\components\\\\Paginate\\\\Paginates.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"; //? ACTIONS\n\nimport { setPagIndexes } from \"../../actions/index\"; //? STYLES\n//import { PagesList, PageNumber } from \"./styles/PaginationSC\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Paginates(_ref) {\n  _s();\n\n  let {\n    paginate,\n    setNext\n  } = _ref;\n  const dispatch = useDispatch();\n  const allrecipes = useSelector(state => state.recipes.length);\n  const [currentPage, setCurrentPage] = useState(1);\n  const recipesPerPage = 9;\n  const indexOfLastRecipe = currentPage * recipesPerPage;\n  const indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;\n  const pagesDisplayLimit = 5;\n  const [maxPageDisplay, setMaxPageDisplay] = useState(5);\n  const [minPageDisplay, setMinPageDisplay] = useState(1); //* Update store with indexLastRecipe & indexFirstRecipe\n\n  useEffect(() => dispatch(setPagIndexes(indexOfLastRecipe, indexOfFirstRecipe)), [indexOfLastRecipe, indexOfFirstRecipe, dispatch]); //* Reset to first page when recipes changes\n\n  useEffect(() => {\n    setCurrentPage(1);\n    setMaxPageDisplay(5);\n    setMinPageDisplay(1);\n  }, [allrecipes]); //* Calculate number of posssible pages\n\n  const pageNumber = [];\n\n  for (let i = 1; i <= Math.ceil(allrecipes / recipesPerPage); i++) {\n    pageNumber.push(i);\n    console.log(pageNumber);\n  } //* function to set page number by click\n  //const handleClick = e => {\n  //  setCurrentPage(Number(e.target.id));\n  //};\n  //* functions to pass to prev/next page\n\n\n  const handleSupPrev = () => {\n    if (currentPage !== 1) {\n      setCurrentPage(1);\n      setMaxPageDisplay(5);\n      setMinPageDisplay(1);\n    }\n  };\n\n  const handlePrev = () => {\n    if (currentPage !== 1) {\n      setCurrentPage(currentPage - 1);\n\n      if (currentPage - 1 < minPageDisplay) {\n        setMaxPageDisplay(maxPageDisplay - pagesDisplayLimit < 5 ? 5 : maxPageDisplay - pagesDisplayLimit);\n        setMinPageDisplay(minPageDisplay - pagesDisplayLimit <= 0 ? 1 : minPageDisplay - pagesDisplayLimit);\n      }\n    }\n  };\n\n  const handleNext = () => {\n    if (currentPage !== pageNumber.length) {\n      console.log(\"owo im taired\");\n      setCurrentPage(currentPage + 1);\n\n      if (currentPage + 1 > maxPageDisplay) {\n        setMaxPageDisplay(maxPageDisplay + pagesDisplayLimit);\n        setMinPageDisplay(minPageDisplay + pagesDisplayLimit);\n      }\n    }\n  };\n\n  const handleSupNext = () => {\n    const lastPage = pageNumber.length;\n\n    if (currentPage !== lastPage) {\n      setCurrentPage(lastPage);\n      setMaxPageDisplay(lastPage);\n      setMinPageDisplay(lastPage - pagesDisplayLimit + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    children: pageNumber.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSupPrev,\n        children: \"<<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrev,\n        children: \"<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), pageNumber === null || pageNumber === void 0 ? void 0 : pageNumber.map(number => {\n        if (number <= maxPageDisplay && number >= minPageDisplay) {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            id: number,\n            className: currentPage === number ? \"active\" : null,\n            onClick: () => paginate(number),\n            children: number\n          }, number, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this);\n        } else {\n          return null;\n        }\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setNext(),\n        children: \">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSupNext,\n        children: \">>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Paginates, \"s4PeG3R07TAnoh2PGfR0rrTP+lQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Paginates;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginates\");","map":{"version":3,"sources":["C:/Users/ttige/Desktop/harsh/client/src/components/Paginate/Paginates.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","setPagIndexes","Paginates","paginate","setNext","dispatch","allrecipes","state","recipes","length","currentPage","setCurrentPage","recipesPerPage","indexOfLastRecipe","indexOfFirstRecipe","pagesDisplayLimit","maxPageDisplay","setMaxPageDisplay","minPageDisplay","setMinPageDisplay","pageNumber","i","Math","ceil","push","console","log","handleSupPrev","handlePrev","handleNext","handleSupNext","lastPage","map","number"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n//? ACTIONS\r\nimport {setPagIndexes} from \"../../actions/index\"\r\n\r\n//? STYLES\r\n//import { PagesList, PageNumber } from \"./styles/PaginationSC\";\r\n\r\nexport  default function Paginates({paginate, setNext}) {\r\n  const dispatch = useDispatch();\r\n  const allrecipes = useSelector(state => state.recipes.length);\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const recipesPerPage = 9;\r\n  const indexOfLastRecipe = currentPage * recipesPerPage;\r\n  const indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;\r\n  const pagesDisplayLimit = 5;\r\n  const [maxPageDisplay, setMaxPageDisplay] = useState(5);\r\n  const [minPageDisplay, setMinPageDisplay] = useState(1);\r\n\r\n  //* Update store with indexLastRecipe & indexFirstRecipe\r\n  useEffect(\r\n    () => dispatch(setPagIndexes(indexOfLastRecipe, indexOfFirstRecipe)),\r\n    [indexOfLastRecipe, indexOfFirstRecipe, dispatch]\r\n  );\r\n\r\n  //* Reset to first page when recipes changes\r\n  useEffect(() => {\r\n    setCurrentPage(1);\r\n    setMaxPageDisplay(5);\r\n    setMinPageDisplay(1);\r\n  }, [allrecipes]);\r\n\r\n  //* Calculate number of posssible pages\r\n  const pageNumber = [];\r\n  for (let i = 1; i <= Math.ceil(allrecipes / recipesPerPage); i++) {\r\n    pageNumber.push(i); console.log(pageNumber)\r\n    \r\n  }\r\n\r\n  //* function to set page number by click\r\n  //const handleClick = e => {\r\n  //  setCurrentPage(Number(e.target.id));\r\n  //};\r\n\r\n  \r\n\r\n  //* functions to pass to prev/next page\r\n  const handleSupPrev = () => {\r\n    if (currentPage !== 1) {\r\n      setCurrentPage(1);\r\n      setMaxPageDisplay(5);\r\n      setMinPageDisplay(1);\r\n    }\r\n  };\r\n  const handlePrev = () => {\r\n    if (currentPage !== 1) {\r\n      setCurrentPage(currentPage - 1);\r\n      if (currentPage - 1 < minPageDisplay) {\r\n        setMaxPageDisplay(\r\n          maxPageDisplay - pagesDisplayLimit < 5 ? 5 : maxPageDisplay - pagesDisplayLimit\r\n        );\r\n        setMinPageDisplay(\r\n          minPageDisplay - pagesDisplayLimit <= 0 ? 1 : minPageDisplay - pagesDisplayLimit\r\n        );\r\n      }\r\n    }\r\n  };\r\n  const handleNext = () => {\r\n    if (currentPage !== pageNumber.length) {\r\n      console.log(\"owo im taired\")\r\n      setCurrentPage(currentPage + 1);\r\n      if (currentPage + 1 > maxPageDisplay) {\r\n        setMaxPageDisplay(maxPageDisplay + pagesDisplayLimit);\r\n        setMinPageDisplay(minPageDisplay + pagesDisplayLimit);\r\n      }\r\n    }\r\n  };\r\n  const handleSupNext = () => {\r\n    const lastPage = pageNumber.length;\r\n    if (currentPage !== lastPage) {\r\n      setCurrentPage(lastPage);\r\n      setMaxPageDisplay(lastPage);\r\n      setMinPageDisplay(lastPage - pagesDisplayLimit + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      {pageNumber.length === 0 ? (\r\n        <p></p>\r\n      ) : (\r\n        <div>\r\n          <button onClick={handleSupPrev}>{\"<<\"}</button>\r\n          <button onClick={handlePrev}>{\"<\"}</button>\r\n          {pageNumber?.map(number => {\r\n            if (number <= maxPageDisplay && number >= minPageDisplay) {\r\n              return (\r\n                <button\r\n                  key={number}\r\n                  id={number}\r\n                  className={currentPage === number ? \"active\" : null}\r\n                  onClick={() => paginate(number)}\r\n                >\r\n                  {number}\r\n                </button>\r\n              );\r\n            } else {\r\n              return null;\r\n            }\r\n          })}\r\n          <button onClick={() => setNext()}>{\">\"}</button>\r\n          <button onClick={handleSupNext}>{\">>\"}</button>\r\n        </div>\r\n      )}\r\n    </nav>\r\n  );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}