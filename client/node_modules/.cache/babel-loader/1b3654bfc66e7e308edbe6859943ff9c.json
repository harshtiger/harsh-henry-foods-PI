{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ttige\\\\Desktop\\\\harsh\\\\client\\\\src\\\\components\\\\Paginate\\\\Paginate.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./Paginate.css\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Paginate(_ref) {\n  _s();\n\n  let {\n    recipesPerPage,\n    allRecipes,\n    paginate\n  } = _ref;\n  const pageNumbers = [];\n  const [pageNumberLimit] = useState(5);\n  const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);\n  const [minPageNumberLimit, setminPageNumberLimit] = useState(0);\n\n  const handleNextbtn = () => {\n    setcurrentPage(currentPage + 1);\n\n    if (currentPage + 1 > maxPageNumberLimit) {\n      setmaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\n      setminPageNumberLimit(minPageNumberLimit + pageNumberLimit);\n    }\n  };\n\n  const handlePrevbtn = () => {\n    setcurrentPage(currentPage - 1);\n\n    if ((currentPage - 1) % pageNumberLimit === 0) {\n      setmaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\n      setminPageNumberLimit(minPageNumberLimit - pageNumberLimit);\n    }\n  };\n\n  for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"btnPag\",\n    children: pageNumbers && pageNumbers.map(number => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevbtn,\n        disabled: currentPage === pages[0] ? true : false,\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => paginate(number),\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextbtn,\n        disabled: currentPage === pages[pages.length - 1] ? true : false,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 4\n  }, this);\n}\n\n_s(Paginate, \"JgN9WRQgrYd4Qp68GRoAMJShnAM=\");\n\n_c = Paginate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginate\");","map":{"version":3,"sources":["C:/Users/ttige/Desktop/harsh/client/src/components/Paginate/Paginate.jsx"],"names":["React","useState","useEffect","Paginate","recipesPerPage","allRecipes","paginate","pageNumbers","pageNumberLimit","maxPageNumberLimit","setmaxPageNumberLimit","minPageNumberLimit","setminPageNumberLimit","handleNextbtn","setcurrentPage","currentPage","handlePrevbtn","i","Math","ceil","push","map","number","pages","length"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAIA,eAAe,SAASC,QAAT,OAA4D;AAAA;;AAAA,MAA1C;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,UAAlB;AAA8BC,IAAAA;AAA9B,GAA0C;AACzE,QAAMC,WAAW,GAAG,EAApB;AAEA,QAAM,CAACC,eAAD,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACQ,kBAAD,EAAqBC,qBAArB,IAA8CT,QAAQ,CAAC,CAAD,CAA5D;AACA,QAAM,CAACU,kBAAD,EAAqBC,qBAArB,IAA8CX,QAAQ,CAAC,CAAD,CAA5D;;AAGA,QAAMY,aAAa,GAAG,MAAM;AAC1BC,IAAAA,cAAc,CAACC,WAAW,GAAG,CAAf,CAAd;;AAEA,QAAIA,WAAW,GAAG,CAAd,GAAkBN,kBAAtB,EAA0C;AACtCC,MAAAA,qBAAqB,CAACD,kBAAkB,GAAGD,eAAtB,CAArB;AACAI,MAAAA,qBAAqB,CAACD,kBAAkB,GAAGH,eAAtB,CAArB;AACH;AACJ,GAPC;;AASF,QAAMQ,aAAa,GAAG,MAAM;AAC1BF,IAAAA,cAAc,CAACC,WAAW,GAAG,CAAf,CAAd;;AAEA,QAAI,CAACA,WAAW,GAAG,CAAf,IAAoBP,eAApB,KAAwC,CAA5C,EAA+C;AAC3CE,MAAAA,qBAAqB,CAACD,kBAAkB,GAAGD,eAAtB,CAArB;AACAI,MAAAA,qBAAqB,CAACD,kBAAkB,GAAGH,eAAtB,CAArB;AACH;AACF,GAPD;;AAUE,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIC,IAAI,CAACC,IAAL,CAAUd,UAAU,GAAGD,cAAvB,CAArB,EAA6Da,CAAC,EAA9D,EAAkE;AAChEV,IAAAA,WAAW,CAACa,IAAZ,CAAiBH,CAAjB;AACD;;AACD,sBACC;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,cACIV,WAAW,IACVA,WAAW,CAACc,GAAZ,CAAiBC,MAAD,iBAEd;AAAA,8BAAE;AACA,QAAA,OAAO,EAAEN,aADT;AAEA,QAAA,QAAQ,EAAED,WAAW,KAAKQ,KAAK,CAAC,CAAD,CAArB,GAA2B,IAA3B,GAAkC,KAF5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAF,eAKS;AAAqB,QAAA,OAAO,EAAE,MAAMjB,QAAQ,CAACgB,MAAD,CAA5C;AAAA,kBACJA;AADI,SAAaA,MAAb;AAAA;AAAA;AAAA;AAAA,cALT,eAQE;AACY,QAAA,OAAO,EAAET,aADrB;AAEY,QAAA,QAAQ,EAAEE,WAAW,KAAKQ,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAArB,GAA0C,IAA1C,GAAiD,KAFvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA,oBAFF;AAFL;AAAA;AAAA;AAAA;AAAA,UADD;AAsBD;;GApDuBrB,Q;;KAAAA,Q","sourcesContent":["import React from \"react\";\r\nimport \"./Paginate.css\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n\r\n\r\nexport default function Paginate({ recipesPerPage, allRecipes, paginate }) {\r\n  const pageNumbers = [];\r\n\r\n  const [pageNumberLimit] = useState(5);\r\n  const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);\r\n  const [minPageNumberLimit, setminPageNumberLimit] = useState(0);\r\n\r\n\r\n  const handleNextbtn = () => {\r\n    setcurrentPage(currentPage + 1);\r\n\r\n    if (currentPage + 1 > maxPageNumberLimit) {\r\n        setmaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\r\n        setminPageNumberLimit(minPageNumberLimit + pageNumberLimit);\r\n    }\r\n};\r\n\r\nconst handlePrevbtn = () => {\r\n  setcurrentPage(currentPage - 1);\r\n\r\n  if ((currentPage - 1) % pageNumberLimit === 0) {\r\n      setmaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\r\n      setminPageNumberLimit(minPageNumberLimit - pageNumberLimit);\r\n  }\r\n};\r\n\r\n\r\n  for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return (\r\n   <nav className=\"btnPag\">\r\n      {pageNumbers &&\r\n        pageNumbers.map((number) => (\r\n\r\n          <><button\r\n            onClick={handlePrevbtn}\r\n            disabled={currentPage === pages[0] ? true : false}\r\n          >\r\n            Prev\r\n          </button><button key={number} onClick={() => paginate(number)}>\r\n              {number}\r\n            </button>\r\n            <button\r\n                        onClick={handleNextbtn}\r\n                        disabled={currentPage === pages[pages.length - 1] ? true : false}\r\n                    >\r\n                        Next\r\n                    </button></>\r\n        ))}\r\n    </nav>\r\n  );\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}