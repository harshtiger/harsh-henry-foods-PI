{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ttige\\\\Desktop\\\\harsh\\\\client\\\\src\\\\components\\\\Paginate\\\\Paginate.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./Paginate.css\";\n/*export default function Paginate({ recipesPerPage, allRecipes, paginate }) {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return (\r\n   <nav className=\"btnPag\">\r\n      {pageNumbers &&\r\n        pageNumbers.map((number) => (\r\n        <button key={number} onClick={() => paginate(number)}>\r\n            {number}\r\n          </button>\r\n        ))}\r\n    </nav>\r\n  );\r\n}*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Paginate(_ref) {\n  _s();\n\n  let {\n    allRecipes,\n    getRecipes\n  } = _ref;\n\n  function getRecipesFunction() {\n    getRecipes();\n  }\n\n  useEffect(() => {\n    getRecipesFunction();\n  }, []);\n  const [render, setRender] = useState(allRecipes);\n  const [currentPage, setCurrentPage] = useState(1); // aca seteo la pagina inicial en 1\n\n  const [recipesPerPage\n  /*setRecipesPerPage*/\n  ] = useState(9); // le pido paginar 9  cards en cada page\n\n  const [recipesPerPageLimit] = useState(10);\n  const [maxRecipesPerPageLimit, setmaxRecipesPerPageLimit] = useState(10);\n  const [minRecipesPerPageLimit, setminRecipesPerPageLimit] = useState(0);\n\n  const paginate = event => {\n    // esto setea el paginado\n    setCurrentPage(Number(event.target.id));\n  };\n\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const indexOfLastRecipe = currentPage * recipesPerPage;\n  const indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;\n  const currentRecipes = allRecipes.slice(indexOfFirstRecipe, indexOfLastRecipe);\n  const renderPageNumers = pageNumbers.map(number => {\n    if (number < maxRecipesPerPageLimit + 1 && number > minRecipesPerPageLimit) {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        id: number,\n        onClick: paginate,\n        className: currentPage === number ? 'active' : null,\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  });\n\n  const handleNextbtn = () => {\n    setCurrentPage(currentPage + 1);\n\n    if (currentPage + 1 > maxRecipesPerPageLimit) {\n      setmaxRecipesPerPageLimit(maxRecipesPerPageLimit + recipesPerPageLimit);\n      setminRecipesPerPageLimit(minRecipesPerPageLimit + recipesPerPageLimit);\n    }\n  };\n\n  const handlePrevbtn = () => {\n    if ((currentPage - 1) % recipesPerPageLimit === 0) {\n      setmaxRecipesPerPageLimit(maxRecipesPerPageLimit - recipesPerPageLimit);\n      setminRecipesPerPageLimit(minRecipesPerPageLimit - recipesPerPageLimit);\n    }\n  };\n\n  let pageIncrementBtn = null;\n\n  if (pageNumbers.lenght > maxRecipesPerPageLimit) {\n    pageIncrementBtn = /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: handleNextbtn,\n      children: \"&hellip \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 23\n    }, this);\n  }\n\n  let pageDecrementBtn = null;\n\n  if (minRecipesPerPageLimit >= 1) {\n    pageDecrementBtn = /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: handlePrevbtn,\n      children: \"&hellip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 23\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"paginate\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePrevbtn,\n          disabled: currentPage === pageNumbers[0] ? true : false,\n          children: \"Prev\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }, this), pageDecrementBtn, renderPageNumers, pageIncrementBtn, /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextbtn,\n          disabled: currentPage === pageNumbers[pageNumbers.length - 1] ? true : false,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Paginate, \"h0UJ7gwh1/Orv/zjl+zv0oZ2Qnc=\");\n\n_c = Paginate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginate\");","map":{"version":3,"sources":["C:/Users/ttige/Desktop/harsh/client/src/components/Paginate/Paginate.jsx"],"names":["React","Paginate","allRecipes","getRecipes","getRecipesFunction","useEffect","render","setRender","useState","currentPage","setCurrentPage","recipesPerPage","recipesPerPageLimit","maxRecipesPerPageLimit","setmaxRecipesPerPageLimit","minRecipesPerPageLimit","setminRecipesPerPageLimit","paginate","event","Number","target","id","pageNumbers","i","Math","ceil","push","indexOfLastRecipe","indexOfFirstRecipe","currentRecipes","slice","renderPageNumers","map","number","handleNextbtn","handlePrevbtn","pageIncrementBtn","lenght","pageDecrementBtn","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./Paginate.css\";\r\n\r\n/*export default function Paginate({ recipesPerPage, allRecipes, paginate }) {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return (\r\n   <nav className=\"btnPag\">\r\n      {pageNumbers &&\r\n        pageNumbers.map((number) => (\r\n        <button key={number} onClick={() => paginate(number)}>\r\n            {number}\r\n          </button>\r\n        ))}\r\n    </nav>\r\n  );\r\n}*/\r\n\r\n\r\nexport default function Paginate({allRecipes, getRecipes}){\r\n  function getRecipesFunction(){\r\n    getRecipes()\r\n  }\r\n  useEffect(()=> {\r\n    getRecipesFunction()\r\n  }, [])\r\n\r\n  const [render, setRender] =  useState(allRecipes)\r\n\r\nconst [currentPage, setCurrentPage] = useState(1);        // aca seteo la pagina inicial en 1\r\nconst [recipesPerPage, /*setRecipesPerPage*/] = useState(9);  // le pido paginar 9  cards en cada page\r\n\r\nconst [recipesPerPageLimit] = useState(10)\r\n  const [maxRecipesPerPageLimit, setmaxRecipesPerPageLimit] = useState(10);\r\n  const [minRecipesPerPageLimit , setminRecipesPerPageLimit] = useState(0);\r\n\r\n\r\n  const paginate = (event) => {   // esto setea el paginado\r\n    setCurrentPage(Number(event.target.id));\r\n    };\r\n\r\n    const pageNumbers = [];\r\n\r\n    for (let i = 1; i <= Math.ceil(allRecipes / recipesPerPage); i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n\r\n    \r\n  const indexOfLastRecipe = currentPage * recipesPerPage;   \r\n  const indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;\r\n\r\n  const currentRecipes = allRecipes.slice(\r\n    indexOfFirstRecipe,\r\n    indexOfLastRecipe\r\n  );\r\n\r\n  const renderPageNumers = pageNumbers.map((number) =>{\r\n    if (number < maxRecipesPerPageLimit + 1 && number > minRecipesPerPageLimit){\r\n      return (\r\n        <li key={number}\r\n        id= {number}\r\n        onClick={paginate}\r\n        className={currentPage === number ? 'active' : null}\r\n        >\r\n          {number}\r\n        </li>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n \r\n  });\r\n  \r\n  const handleNextbtn = () => {\r\n    setCurrentPage(currentPage +1);\r\n    if (currentPage + 1 > maxRecipesPerPageLimit) {\r\n      setmaxRecipesPerPageLimit(maxRecipesPerPageLimit + recipesPerPageLimit)\r\n      setminRecipesPerPageLimit(minRecipesPerPageLimit + recipesPerPageLimit)\r\n    }\r\n  };\r\n\r\n  const handlePrevbtn = () =>{\r\n\r\n    if ((currentPage - 1 ) % recipesPerPageLimit === 0) {\r\n      setmaxRecipesPerPageLimit(maxRecipesPerPageLimit - recipesPerPageLimit);\r\n      setminRecipesPerPageLimit(minRecipesPerPageLimit - recipesPerPageLimit);\r\n      \r\n    }\r\n }\r\n\r\n\r\n\r\n let pageIncrementBtn = null;\r\n if (pageNumbers.lenght >  maxRecipesPerPageLimit){\r\n   pageIncrementBtn = <li onClick={handleNextbtn}>&hellip </li> \r\n }\r\n\r\n let pageDecrementBtn = null;\r\n if (minRecipesPerPageLimit >= 1){\r\n   pageDecrementBtn = <li onClick={handlePrevbtn}>&hellip</li>\r\n }\r\n\r\n\r\n return(\r\n  <div className=\"paginate\">\r\n  <ul>\r\n    <li>\r\n      <button \r\n      onClick={handlePrevbtn}\r\n      disabled={currentPage === pageNumbers[0]? true : false}\r\n      >\r\n        Prev\r\n      </button>\r\n    </li>\r\n\r\n    {pageDecrementBtn}\r\n    {renderPageNumers}\r\n    {pageIncrementBtn}\r\n\r\n\r\n    <li>\r\n      <button\r\n      onClick={handleNextbtn}\r\n      disabled={currentPage === pageNumbers[pageNumbers.length - 1] ? true : false}>\r\n      Next\r\n      </button>\r\n    </li>\r\n  </ul>\r\n</div>\r\n )\r\n\r\n \r\n\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}